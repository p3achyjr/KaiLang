use kai_ast::ast::{
  Function,
  FuncArg,
  Stmt,
  ElseIf,
  Expr,
  Type,
};
use kai_common::ops::Opcode;

grammar;

// MACROS

Comma<T>: Vec<T> = {
  <v:(<T> ",")*> <e:T?> => match e {
      None => v,
      Some(e) => {
          let mut v = v;
          v.push(e);
          v
      }
  }
};

// END MACROS

pub Function: Function = {
  "function" <i:Ident> <fa:FuncArgs> ":" <ret_ty:Type> <b:Block> => 
    Function {
      ident: i,
      args: fa,
      body: b,
      ret_ty: ret_ty,
    },
};

FuncArgs: Vec<FuncArg> = {
  "(" <al:FuncArgList> ")" => al,
};

FuncArgList = Comma<FuncArg>;

FuncArg: FuncArg = {
  <i:Ident> ":" <t:Type> => FuncArg {ty: t, ident: i},
};

Block: Vec<Stmt> = {
  "{" <sl:StmtList> "}" => sl,
};

StmtList: Vec<Stmt> = {
  () => vec![],
  <l:StmtList> <s:StmtWrapper> => (| | {let mut l = l; l.push(s); l})(),
};

StmtWrapper: Stmt = {
  <s:Stmt> ";" => s,
  <i:If> => i,
};

Stmt: Stmt = {
  "let" <i:Ident> "=" <e:Expr> => Stmt::VarDecl(i, e),
  <i:Ident> "=" <e:Expr> => Stmt::VarAsgn(i, e),

  "return" <e:Expr> => Stmt::Return(e),
};

If: Stmt = {
  "if" <c:Expr> <b:Block> <e:Else> =>
    Stmt::If(c, b, Box::new(e)),
};

Else: ElseIf = {
  () => ElseIf::Empty,
  "else" <b:Block> => ElseIf::Else(b),
  "else" <i:If> => {
    match i {
      Stmt::If(c, b, e) => ElseIf::ElseIf(c, b, e),
      _ => panic!("Saw non-if case when parsing elseif"),
    }
  },
};

Expr: Expr = {
  <l: Expr> <o: OrOp> <r: AndT> => Expr::Binop(o, Box::new(l), Box::new(r)),
  AndT,
};

OrOp: Opcode = {
  "||" => Opcode::LogOr,
};

AndT: Expr = {
  <l: AndT> <o: AndOp> <r: EqT> => Expr::Binop(o, Box::new(l), Box::new(r)),
  EqT,
};

AndOp: Opcode = {
  "&&" => Opcode::LogAnd,
};

EqT: Expr = {
  <l: EqT> <o: EqOp> <r: CmpT> => Expr::Binop(o, Box::new(l), Box::new(r)),
  CmpT,
};

EqOp: Opcode = {
  "==" => Opcode::LogEq,
  "!=" => Opcode::LogNeq,
};

CmpT: Expr = {
  <l: CmpT> <o: CmpOp> <r: Arith> => Expr::Binop(o, Box::new(l), Box::new(r)),
  Arith,
};

CmpOp: Opcode = {
  "<" => Opcode::Lt,
  "<=" => Opcode::Leq,
  ">" => Opcode::Gt,
  ">=" => Opcode::Geq,
};

Arith: Expr = {
  <l:Arith> <o:ArithOp> <r:Factor> => Expr::Binop(o, Box::new(l), Box::new(r)),
  Factor,
};

ArithOp: Opcode = {
  "+" => Opcode::Add,
  "-" => Opcode::Sub,
};

Factor: Expr = {
  <l:Factor> <o:FactorOp> <r:Term> => Expr::Binop(o, Box::new(l), Box::new(r)),
  Term,
};

FactorOp: Opcode = {
  "*" => Opcode::Mul,
  "/" => Opcode::Div,
  "%" => Opcode::Mod,
};

Term: Expr = {
  <b:Bool> => Expr::Bool(b),
  Num => Expr::Num(<>),
  Ident => Expr::Ident(<>),
  "(" <e:Expr> ")" => e,
};

Type: Type = {
  "int" => Type::Int,
  "bool" => Type::Bool,
};

Bool: bool = {
  "true" => true,
  "false" => false,
};
Num: i32 = <s:r"[0-9]+"> => s.to_string().parse::<i32>().unwrap();
Ident: String = <s:r"[a-zA-Z_]+\w*"> => s.to_string();
